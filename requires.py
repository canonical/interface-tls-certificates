from charms.reactive import when, when_not
from charms.reactive import set_flag, clear_flag, toggle_flag
from charms.reactive import Endpoint
from charms.reactive import data_changed

from . import impl


class TlsRequires(Endpoint):
    """
    The client's side of the interface protocol.

    The following flags may be set:

      * `{endpoint_name}.available`
        Whenever the relation is joined.

      * `{endpoint_name}.ca.available`
        When the root CA information is available via the [root_ca_cert][] and
        [root_ca_chain][] properties.

      * `{endpoint_name}.ca.changed`
        When the root CA information has changed, whether because
        they have just become available or if they were regenerated by the CA.
        Once processed this flag should be removed by the charm.

      * `{endpoint_name}.certs.available`
        When the requested server or client certs are available.

      * `{endpoint_name}.certs.changed`
        When the requested server or client certs have changed, whether because
        they have just become available or if they were regenerated by the CA.
        Once processed this flag should be removed by the charm.

      * `{endpoint_name}.server.certs.available`
        When the server certificates requested by [request_server_cert][] are
        available via the [server_certs][] collection.

      * `{endpoint_name}.server.certs.changed`
        When the requested server certificates have changed, whether because
        they have just become available or if they were regenerated by the CA.
        Once processed this flag should be removed by the charm.

      * `{endpoint_name}.client.certs.available`
        When the client certificates requested by [request_client_cert][] are
        available via the [client_certs][] collection.

      * `{endpoint_name}.client.certs.changed`
        When the requested client certificates have changed, whether because
        they have just become available or if they were regenerated by the CA.
        Once processed this flag should be removed by the charm.

    The following flags have been deprecated:

      * `{endpoint_name}.server.cert.available`
      * `{endpoint_name}.client.cert.available`
      * `{endpoint_name}.batch.cert.available`

    [Certificate]: common.md#tls_certificates_common.Certificate
    [CertificateRequest]: common.md#tls_certificates_common.CertificateRequest
    [root_ca_cert]: requires.md#requires.TlsRequires.root_ca_cert
    [root_ca_chain]: requires.md#requires.TlsRequires.root_ca_chain
    [request_server_cert]: requires.md#requires.TlsRequires.request_server_cert
    [request_client_cert]: requires.md#requires.TlsRequires.request_client_cert
    [server_certs]: requires.md#requires.TlsRequires.server_certs
    [server_certs_map]: requires.md#requires.TlsRequires.server_certs_map
    [client_certs]: requires.md#requires.TlsRequires.server_certs
    """
    PROTOCOLS = [
        impl.v1.Requires,
    ]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        impl.versions.negotiate(self)  # TODO: do automatically in framework

    @property
    def _relation(self):
        # we assume we only ever have one cert provider related
        return self.relations[0]

    @when('endpoint.{endpoint_name}.joined')
    def joined(self):
        prefix = self.expand_name('{endpoint_name}.')
        ca_available = self.root_ca_cert
        ca_changed = ca_available and data_changed(prefix + 'ca',
                                                   self.root_ca_cert)
        server_available = self.server_certs
        server_changed = server_available and data_changed(prefix + 'servers',
                                                           self.server_certs)
        client_available = self.client_certs
        client_changed = client_available and data_changed(prefix + 'clients',
                                                           self.client_certs)
        certs_available = server_available or client_available
        certs_changed = server_changed or client_changed

        set_flag(prefix + 'available')
        toggle_flag(prefix + 'ca.available', ca_available)
        toggle_flag(prefix + 'ca.changed', ca_changed)
        toggle_flag(prefix + 'server.certs.available', server_available)
        toggle_flag(prefix + 'server.certs.changed', server_changed)
        toggle_flag(prefix + 'client.certs.available', client_available)
        toggle_flag(prefix + 'client.certs.changed', client_changed)
        toggle_flag(prefix + 'certs.available', certs_available)
        toggle_flag(prefix + 'certs.changed', certs_changed)
        # deprecated
        toggle_flag(prefix + 'server.cert.available', self.server_certs)
        toggle_flag(prefix + 'client.cert.available', self.get_client_cert())
        toggle_flag(prefix + 'batch.cert.available', self.server_certs)

    @when_not('endpoint.{endpoint_name}.joined')
    def broken(self):
        prefix = self.expand_name('{endpoint_name}.')
        clear_flag(prefix + 'available')
        clear_flag(prefix + 'ca.available')
        clear_flag(prefix + 'ca.changed')
        clear_flag(prefix + 'server.certs.available')
        clear_flag(prefix + 'server.certs.changed')
        clear_flag(prefix + 'client.certs.available')
        clear_flag(prefix + 'client.certs.changed')
        clear_flag(prefix + 'certs.available')
        clear_flag(prefix + 'certs.changed')
        # deprecated
        clear_flag(prefix + 'server.cert.available')
        clear_flag(prefix + 'client.cert.available')
        clear_flag(prefix + 'batch.cert.available')

    @property
    def root_ca_cert(self):
        """
        Root CA certificate.
        """
        if not self.is_joined:
            return None
        return self._relation.protocol.root_ca_cert

    def get_ca(self):
        """
        Return the root CA certificate.

        Same as [root_ca_cert][].
        """
        return self.root_ca_cert

    @property
    def root_ca_chain(self):
        """
        The chain of trust for the root CA.
        """
        if not self.is_joined:
            return None
        return self._relation.protocol.root_ca_chain

    def get_chain(self):
        """
        Return the chain of trust for the root CA.

        Same as [root_ca_chain][].
        """
        return self.root_ca_chain

    def get_client_cert(self):
        """
        Deprecated.  Use [request_client_cert][] and the [client_certs][]
        collection instead.

        Return a globally shared client certificate and key.
        """
        if not self.joined:
            return None
        cert = self._relation.protocol.global_client_cert
        return (cert.cert, cert.key)

    def get_server_cert(self):
        """
        Deprecated.  Use the [server_certs][] collection instead.

        Return the cert and key of the first server certificate requested.
        """
        if not self.server_certs:
            return (None, None)
        cert = self.server_certs[0]
        return (cert.cert, cert.key)

    @property
    def server_certs(self):
        """
        List of [Certificate][] instances for all available server certs.
        """
        if not self.is_joined:
            return []
        return list(self._relation.protocol.server_certs.values())

    @property
    def server_certs_map(self):
        """
        Mapping of server [Certificate][] instances by their `common_name`.
        """
        if not self.is_joined:
            return {}
        return self._relation.protocol.server_certs

    def get_batch_requests(self):
        """
        Deprecated.  Use [server_certs_map][] instead.

        Mapping of server [Certificate][] instances by their `common_name`.
        """
        return self.server_certs_map

    @property
    def client_certs(self):
        """
        List of [Certificate][] instances for all available client certs.
        """
        if not self.is_joined:
            return []
        return list(self._relation.protocol.client_certs.values())

    @property
    def client_certs_map(self):
        """
        Mapping of client [Certificate][] instances by their `common_name`.
        """
        if not self.is_joined:
            return {}
        return self._relation.protocol.client_certs

    def request_server_cert(self, cn, sans=None, cert_name=None):
        """
        Request a server certificate and key be generated for the given
        common name (`cn`) and optional list of alternative names (`sans`).

        The `cert_name` is deprecated and not needed.

        This can be called multiple times to request more than one server
        certificate, although the common names must be unique.  If called
        again with the same common name, it will be ignored.
        """
        if not self.is_joined:
            return
        self._relation.protocol.request_cert('server', cn, sans, cert_name)

    def add_request_server_cert(self, cn, sans):
        """
        Deprecated.  Use [request_server_cert][] instead.
        """
        self.request_server_cert(cn, sans)

    def request_server_certs(self):
        """
        Deprecated.  Just use [request_server_cert][]; this does nothing.
        """
        pass

    def request_client_cert(self, cn, sans):
        """
        Request a client certificate and key be generated for the given
        common name (`cn`) and list of alternative names (`sans`).

        This can be called multiple times to request more than one client
        certificate, although the common names must be unique.  If called
        again with the same common name, it will be ignored.
        """
        if not self.joined:
            return
        self._relation.protocol.request_cert('client', cn, sans)
